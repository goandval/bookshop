// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// KeycloakClient is an autogenerated mock type for the KeycloakClient type
type KeycloakClient struct {
	mock.Mock
}

// ValidateToken provides a mock function with given fields: ctx, token
func (_m *KeycloakClient) ValidateToken(ctx context.Context, token string) (string, string, []string, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 string
	var r1 string
	var r2 []string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string, []string, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) []string); ok {
		r2 = rf(ctx, token)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]string)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, string) error); ok {
		r3 = rf(ctx, token)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewKeycloakClient creates a new instance of KeycloakClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeycloakClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeycloakClient {
	mock := &KeycloakClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
